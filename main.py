# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'myGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtDesigner
import numpy as np
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier


class Ui_MainWindow(object):
    flag = 0
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 514)
        MainWindow.setStyleSheet('QMainWindow {background-color: #F96C0E;}')

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("centralwidget")
        
        self.label_h = QtWidgets.QLabel(self.centralwidget)
        self.label_h.setGeometry(QtCore.QRect(290, 5, 226, 135))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        font.setWeight(75)
        self.label_h.setFont(font)
        self.label_h.setStyleSheet('QLabel {color: #0E16F9;}')
        self.label_h.setObjectName("label_h")
        
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setGeometry(QtCore.QRect(150, 390, 51, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.spinBox.setFont(font)
        self.spinBox.setValue(7)
        self.spinBox.setMaximum(9);
        self.spinBox.setObjectName("spinBox")
        
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(240, 185, 106, 24))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(30, 400, 100, 24))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(350, 160, 390, 80))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setAutoFillBackground(False)
        self.label_3.setStyleSheet('QLabel {color: #0E16F9; background-color: #F3BA7A;}')
        self.label_3.setObjectName("label_3")
        
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(570, 290, 186, 42))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.f_nb)
        
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(300, 290, 169, 42))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.f_dt)
        
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(60, 290, 93, 42))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.pushButton.setFont(font)
        self.pushButton.setAutoDefault(False)
        self.pushButton.setDefault(False)
        self.pushButton.setFlat(False)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.f_knn)
        
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(550, 340, 228, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.pred_nb)
        
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(280, 340, 214, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.pred_dt)
        
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(40, 340, 137, 33))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setAutoDefault(False)
        self.pushButton_5.setDefault(False)
        self.pushButton_5.setFlat(False)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.pred_knn)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_h.setText(_translate("MainWindow", "Hepatitis"))
        self.label.setText(_translate("MainWindow", "Accuracy: "))
        self.label_2.setText(_translate("MainWindow", "Neighbours"))
        self.label_3.setText(_translate("MainWindow", "-"))
        self.pushButton_3.setText(_translate("MainWindow", "Naive Bayesian"))
        self.pushButton_2.setText(_translate("MainWindow", "Decision Tree"))
        self.pushButton.setText(_translate("MainWindow", "K-NN "))
        self.pushButton_7.setText(_translate("MainWindow", "Predict (Naive Bayesian)"))
        self.pushButton_6.setText(_translate("MainWindow", "Predict (Decision Tree)"))
        self.pushButton_5.setText(_translate("MainWindow", "Predict (K-NN)"))
        
    #########################################################################################################
    def f_knn(self):
        data = np.loadtxt('sample.txt', delimiter=',', dtype=int)
        
        # Split into training and test set
        X_train, X_test, y_train, y_test = train_test_split(data[:, 1:], data[:, 0], test_size=0.2, random_state=42)

        neighbors = np.arange(1, 10)
        train_accuracy = np.empty(len(neighbors))
        test_accuracy = np.empty(len(neighbors))

        # Loop over K values
        for i, k in enumerate(neighbors):
            knn = KNeighborsClassifier(n_neighbors=k)
            knn.fit(X_train, y_train)
            # Compute training and test data accuracy
            train_accuracy[i] = knn.score(X_train, y_train)
            test_accuracy[i] = knn.score(X_test, y_test)

        if self.flag == 1:
            #  Show Predict PopUp if predict button is clicked
            self.label_3.setText("-")

            pred_data = np.loadtxt('predict.txt', delimiter=',', dtype=int)
            y_pred = knn.predict(pred_data[:,1:])
            
            for person in y_pred:
                if person == 1:
                    popup = popDie()
                    popup.exec_()
                if person == 2:
                    popup = popAlive()
                    popup.exec_()
            
        # if KNN button is clicked
        if self.flag == 0:
            # Generate plot
            plt.plot(neighbors, test_accuracy, label = 'Testing dataset Accuracy')
            plt.plot(neighbors, train_accuracy, label = 'Training dataset Accuracy')
    
            plt.legend()
            plt.xlabel('n_neighbors')
            plt.ylabel('Accuracy')
            plt.show()

            k = self.spinBox.value()
            knn = KNeighborsClassifier(n_neighbors=k)
            knn.fit(X_train, y_train)
            # Compute training and test data accuracy
            train_accuracy[0] = knn.score(X_train, y_train)
            test_accuracy[0] = knn.score(X_test, y_test)
            
            self.label_3.setText("test=" + str(test_accuracy[0]) + "\ntrain=" + str(train_accuracy[0]))
    
    def pred_knn(self):
        self.flag = 1
        self.f_knn()
        self.flag = 0

    #########################################################################################################
    def f_nb(self):
        # Read in data from file
        data = np.genfromtxt('sample.txt', delimiter=',')
        
        # Split data into target attribute and features
        X = data[:,1:] # features
        y = data[:,0] # target attribute
        
        # Split data into training and test sets
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
        
        # Train model using Naive Bayesian Classification
        model = GaussianNB()
        model.fit(X_train, y_train)
        
        # Test model on test data
        y_pred = model.predict(X_test)
        
        # Evaluate model performance
        result = accuracy_score(y_test, y_pred)
        self.label_3.setText(str(result))
            
        if self.flag == 1:
            pred_data = np.loadtxt('predict.txt', delimiter=',', dtype=int)
            y_test = pred_data[:,0]
            y_pred = model.predict(pred_data[:,1:])
            for person in y_pred:
                    if person == 1:
                        popup = popDie()
                        popup.exec_()
                    if person == 2:
                        popup = popAlive()
                        popup.exec_()
            
    def pred_nb(self):
        self.flag = 1
        self.f_nb()
        self.flag = 0
        
    #########################################################################################################
    def f_dt(self):
        # Read in data from file
        data = np.genfromtxt('sample.txt', delimiter=',')
        
        # Split data into target attribute and features
        X = data[:,1:] # features
        y = data[:,0] # target attribute
        
        # Split the data into train and test sets
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)
        
        # Create the decision tree classifier
        clf = DecisionTreeClassifier()
        
        # Train the classifier on the training data
        clf.fit(X_train, y_train)
        
        # Test the classifier on the test data
        accuracy = clf.score(X_test, y_test)

        self.label_3.setText(str(accuracy))
        
        if self.flag == 1:
            # Manual data
            pred_data = np.genfromtxt('predict.txt', delimiter=',')
            
            accuracy = clf.score(pred_data[:,1:], pred_data[:,0])
            y_pred = clf.predict(pred_data[:,1:])
            
            for person in y_pred:
                if person == 1:
                        popup = popDie()
                        popup.exec_()
                if person == 2:
                    popup = popAlive()
                    popup.exec_()
                    


    def pred_dt(self):
        self.flag = 1
        self.f_dt()
        self.flag = 0

    #########################################################################################################
class popDie(QtWidgets.QDialog):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        layout = QtWidgets.QVBoxLayout()
        label = QtWidgets.QLabel('Will Die')
        label.setFont(QtGui.QFont('SansSerif', 24))
        layout.addWidget(label)
        self.setLayout(layout)
        self.setWindowTitle('Pop-up Window')
        self.resize(400, 150)
        
class popAlive(QtWidgets.QDialog):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        layout = QtWidgets.QVBoxLayout()
        label = QtWidgets.QLabel('Will Live')
        label.setFont(QtGui.QFont('SansSerif', 24))
        layout.addWidget(label)
        self.setLayout(layout)
        self.setWindowTitle('Pop-up Window')
        self.resize(400, 150)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())